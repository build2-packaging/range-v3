intf_libs = # Interface dependencies.
impl_libs = # Implementation dependencies.

./: lib{range-v3}: include/{hxx ixx txx}{**} $impl_libs $intf_libs

# Include the generated version header into the distribution (so that we don't
# pick up an installed one) and don't remove it when cleaning in src (so that
# clean results in a state identical to distributed).
#
lib{range-v3}: include/range/v3/hxx{version}
include/range/v3/
{
  # @cja struggling to see how to do this in a nice way, but anyway, what is reason for this? seems version.hpp is already set in upstream.
  hxx{version}: $src_base/../../../in{version} $src_root/manifest
   #$src_base/in{version} $src_root/manifest
  {
    dist = true
    # @cja should this now become _src? don't know what this is about.
    clean = ($src_root != $out_root)
    in.symbol = '@'
    RANGE_V3_MAJOR = $version.major
    RANGE_V3_MINOR = $version.minor
    RANGE_V3_PATCHLEVEL = $version.patch
  }
}


# @cja to verify - why /std? 
include_dirs_flags = "-I$src_base/include/std" "-I$src_base/include"  "-I$out_base/include"
 #"-I$src_root/upstream/include/std" "-I$src_root/upstream/include"  "-I$out_root/upstream/include"

# Build options.
#
cxx.poptions =+ $include_dirs_flags

# Export options.
#
lib{range-v3}:
{
  cxx.export.poptions = $include_dirs_flags
  cxx.export.libs = $intf_libs
}


include/
{
  # Install into the range-v3/ subdirectory of, say, /usr/include/
  # recreating subdirectories.
  #
  {hxx ixx txx}{*}:
  {
    install         = include/ # Header paths are already containing include/range/...
    install.subdirs = true
  }
}
